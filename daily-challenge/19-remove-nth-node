# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val = 0, _next = nil)
#         @val = val
#         @next = _next
#     end
# end
# @param {ListNode} head
# @param {Integer} n
# @return {ListNode}
def remove_nth_from_end(head, n)
  return [] if head.next.nil?

  fast = slow = head
  n.times { fast = fast.next }
  return head.next unless fast

  while fast.next
    fast = fast.next
    slow = slow.next
  end
  slow.next = slow.next.next
  head
end
